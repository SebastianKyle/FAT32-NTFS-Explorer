#include "Utilities.h"

////////////////////////////
/// FAT32 Utilities
////////////////////////////

map<int, ATTRIBUTE> ATTRIBUTE_MAP = {
	{ 0x01, ATTR_READONLY },
	{ 0x02, ATTR_HIDDEN },
	{ 0x04, ATTR_SYSTEM },
	{ 0x08, ATTR_VOLUME_LABEL },
	{ 0x10, ATTR_SUB_DIRECTORY },
	{ 0x20, ATTR_ARCHIVE },
	{ 0x40, ATTR_DEVICE },
	{ 0x80, ATTR_UNUSED },
	{ 0x0F, ATTR_LONG_NAME }
};

bool isLFNEntry(FATDirEntryUn entryToCheck)
{
	return (ATTRIBUTE_MAP[entryToCheck.LongEntry.LDIR_Attr] == ATTR_LONG_NAME);
}

bool isFolderEntry(FATDirEntryUn entryToCheck)
{
	return (ATTRIBUTE_MAP[entryToCheck.ShortEntry.DIR_Attr] == ATTR_SUB_DIRECTORY);
}

bool isSubDirEntry(FATDirEntryUn entryToCheck)
{
	if (ATTRIBUTE_MAP[entryToCheck.ShortEntry.DIR_Attr] == ATTR_SUB_DIRECTORY && entryToCheck.ShortEntry.DIR_Name[0] == 0x2E)
	{
		return true;
	}

	return false;
}

bool isDeletedEntry(FAT_DIR_ENTRY entryToCheck)
{
	return (entryToCheck.DIR_Name[0] == 0xE5);
}

string parseLFNName(WORD* name, WORD count)
{
	stringstream builder;

	for (int i = 0; i < count; i++)
	{
		if (name[i] != 0 && name[i] != 0xFFFF)
		{
			builder << (char)name[i];
		}
		else
		{
			builder << "";
		}
	}

	return builder.str();
}


////////////////////////////
/// NTFS Utilities
////////////////////////////

map<int, FILE_RECORD_FLAGS> FILE_RECORD_FLAGS_MAP = {
	{ 0x00, FILE_RECORD_FLAGS_DELETED_FILE },
	{ 0x01, FILE_RECORD_FLAGS_FILE_IN_USE },
	{ 0x02, FILE_RECORD_FLAGS_DELETED_FOLDER },
	{ 0x03, FILE_RECORD_FLAGS_FOLDER_IN_USE },
};

map<int, ATTR_TYPE> ATTR_TYPE_MAP = {
	{ 0x10, ATTR_TYPE_STANDARD_INFORMATION },
	{ 0x20, ATTR_TYPE_ATTRIBUTE_LIST},
	{ 0x30, ATTR_TYPE_FILE_NAME },
	{ 0x40, ATTR_TYPE_OBJECT_ID },
	{ 0x50, ATTR_TYPE_SECURITY_DESCRIPTOR },
	{ 0x60, ATTR_TYPE_VOLUME_NAME },
	{ 0x70, ATTR_TYPE_VOLUME_INFORMATION },
	{ 0x80, ATTR_TYPE_DATA },
	{ 0x90, ATTR_TYPE_INDEX_ROOT },
	{ 0xA0, ATTR_TYPE_INDEX_ALLOCATION },
	{ 0xB0, ATTR_TYPE_BITMAP },
	{ 0xC0, ATTR_TYPE_REPARSE_POINT },
	{ 0xD0, ATTR_TYPE_EA_INFORMATION},
	{ 0xE0, ATTR_TYPE_EA },
	{ 0x100, ATTR_TYPE_LOGGED_UTILITY_STREAM }
};

map<int, ATTR_FLAGS> ATTR_FLAGS_MAP = {
	{ 0x0000, ATTR_FLAGS_NORMAL },
	{ 0x0100, ATTR_FLAGS_COMPRESSED },
	{ 0x4000, ATTR_FLAGS_ENCRYPTED },
	{ 0x5000, ATTR_FLAGS_SPARSE }
};

map<ATTR_STDINFO_PERMISSION, int> ATTR_STDINFO_PERMISSION_MAP = {
	{ ATTR_STDINFO_PERMISSION_READONLY, 0x00000001 },	
	{ ATTR_STDINFO_PERMISSION_HIDDEN, 0x00000002 },
	{ ATTR_STDINFO_PERMISSION_SYSTEM, 0x00000004 },	
	{ ATTR_STDINFO_PERMISSION_ARCHIVE, 0x00000020 },	
	{ ATTR_STDINFO_PERMISSION_DEVICE, 0x00000040 },	
	{ ATTR_STDINFO_PERMISSION_NORMAL, 0x00000080 },	
	{ ATTR_STDINFO_PERMISSION_TEMP, 0x00000100 },	
	{ ATTR_STDINFO_PERMISSION_SPARSE, 0x00000200 },	
	{ ATTR_STDINFO_PERMISSION_RESPARSE, 0x00000400 },	
	{ ATTR_STDINFO_PERMISSION_COMPRESSED, 0x00000800 },	
	{ ATTR_STDINFO_PERMISSION_OFFLINE, 0x00001000 },	
	{ ATTR_STDINFO_PERMISSION_NCI, 0x00002000 },	
	{ ATTR_STDINFO_PERMISSION_ENCRYPTED, 0x00004000 }
};

map<ATTR_FILENAME_FLAG, int> ATTR_FILENAME_FLAG_MAP = {
	{ ATTR_FILENAME_FLAG_READONLY, 0x00000001 },
	{ ATTR_FILENAME_FLAG_HIDDEN, 0x00000002 },
	{ ATTR_FILENAME_FLAG_SYSTEM, 0x00000004 },
	{ ATTR_FILENAME_FLAG_ARCHIVE, 0x00000020 },
	{ ATTR_FILENAME_FLAG_DEVICE, 0x00000040 },
	{ ATTR_FILENAME_FLAG_NORMAL, 0x00000080 },
	{ ATTR_FILENAME_FLAG_TEMP, 0x00000100 },
	{ ATTR_FILENAME_FLAG_SPARSE, 0x00000200 },
	{ ATTR_FILENAME_FLAG_RESPARSE, 0x00000400 },
	{ ATTR_FILENAME_FLAG_COMPRESSED, 0x00000800 },
	{ ATTR_FILENAME_FLAG_OFFLINE, 0x00001000 },
	{ ATTR_FILENAME_FLAG_NCI, 0x00002000 },
	{ ATTR_FILENAME_FLAG_ENCRYPTED, 0x00004000 },
	{ ATTR_FILENAME_FLAG_DIRECTORY, 0x10000000 },
	{ ATTR_FILENAME_FLAG_INDEXVIEW, 0x20000000 }
};
